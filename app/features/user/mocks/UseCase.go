// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	data "github.com/mujahxd/altabookbridge/app/features/user/data"
	mock "github.com/stretchr/testify/mock"

	user "github.com/mujahxd/altabookbridge/app/features/user"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// RegisterUser provides a mock function with given fields: input
func (_m *UseCase) RegisterUser(input data.RegisterUserInput) (user.Core, error) {
	ret := _m.Called(input)

	var r0 user.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(data.RegisterUserInput) (user.Core, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(data.RegisterUserInput) user.Core); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	if rf, ok := ret.Get(1).(func(data.RegisterUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
